{"version":3,"sources":["utilities/regularExpressions/ValidatePartNumber.Regex.ts","services/PartsTraderPartsService.ts","PartsList.tsx","components/ValidationRule.tsx","components/ValidatedFormField.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["PartNumberValidationRules","validationFunction","partNumber","RegExp","test","validationDescription","PartsTraderPartsServiceCache","PartsTraderPartsService","_partNumber","Promise","resolve","_reject","setTimeout","id","uuid","cost","faker","commerce","price","PartsList","useState","list","setList","useEffect","then","res","map","el","key","ValidationRule","value","message","ValidatedFormField","setValue","validations","onChange","e","target","aria-describedby","className","filter","x","join","App","React","setPartNumber","useDebounce","toLowerCase","debouncedPartNumber","partNumberIsValid","every","isBlacklisted","exclusionsList","PartNumber","includes","htmlFor","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.69cecfc6.chunk.js","sourcesContent":["//consider adding the\r\nexport type IValidationRule<T> = {\r\n  validationFunction: (x: T) => boolean;\r\n  validationDescription: string;\r\n};\r\n\r\nexport const PartNumberValidationRules: IValidationRule<string>[] = [\r\n  {\r\n    validationFunction: (partNumber) => RegExp(\"^([0-9]{4})\").test(partNumber),\r\n    validationDescription:\r\n      \"Part number, has a valid part id, by starting with four letters\", //partid\r\n  },\r\n  {\r\n    validationFunction: (partNumber) => /^[^-]+-[^-]+$/.test(partNumber),\r\n    validationDescription:\r\n      \"Part number and part code are separated by a single hypen ( '-' )\",\r\n  },\r\n  {\r\n    validationFunction: (partNumber) =>\r\n      RegExp(\"[a-zA-Z0-9]{4}$\").test(partNumber),\r\n    validationDescription:\r\n      \"Part number, has a valide part code, by ending with four or more digits or number\", //partcode\r\n  },\r\n  {\r\n    validationFunction: (partNumber) =>\r\n      RegExp(\"^[a-zA-Z0-9-]*$\").test(partNumber),\r\n    validationDescription:\r\n      \"Part number doesn't have any special characters or white space\",\r\n  },\r\n];\r\n\r\nexport const AllPartNumberRegexs = (partnumber: string) =>\r\n  PartNumberValidationRules.every(({ validationFunction }) =>\r\n    validationFunction(partnumber)\r\n  );\r\n","import { uuid } from \"uuidv4\";\r\nimport faker from \"faker\";\r\n\r\n//there was mention of an IPartsTraderPartsService in the email\r\n//However there was no interface to implement and I don't like using\r\n//Dependency Injection in javascript, so I've implement as an object\r\n//Also I would normally cache using something like redux but I felt this\r\n//the benefits outweights the cost for this very small demo\r\nexport const PartsTraderPartsServiceCache: { [key: string]: any } = {};\r\n\r\nexport const PartsTraderPartsService = {\r\n  getPartsByPartNumber: (_partNumber: string) =>\r\n    new Promise((resolve, _reject) => {\r\n      setTimeout(() => {\r\n        resolve([\r\n          { id: uuid(), cost: faker.commerce.price() },\r\n          { id: uuid(), cost: faker.commerce.price() },\r\n          { id: uuid(), cost: faker.commerce.price() },\r\n        ]);\r\n      }, 1000);\r\n    }),\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  PartsTraderPartsServiceCache,\r\n  PartsTraderPartsService,\r\n} from \"./services/PartsTraderPartsService\";\r\n\r\nexport const PartsList = ({ partNumber }: { partNumber: string }) => {\r\n  var [list, setList] = useState(PartsTraderPartsServiceCache[partNumber]);\r\n\r\n  useEffect(() => {\r\n    setList(PartsTraderPartsServiceCache[partNumber]);\r\n  }, [partNumber]);\r\n\r\n  if (!list) {\r\n    PartsTraderPartsService.getPartsByPartNumber(partNumber).then((res) => {\r\n      PartsTraderPartsServiceCache[partNumber] = res;\r\n      setList(res);\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {list ? (\r\n        list.map((el) => <div key={el.id}> x</div>)\r\n      ) : (\r\n        <div> Loading </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import * as React from \"react\";\r\n\r\nexport const ValidationRule = ({ value, validationFunction, message }: any) => {\r\n  return (\r\n    <div>\r\n      {validationFunction(value) ? \"pass\" : \"fail\"} {message}\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { __String } from \"typescript\";\r\nimport { IValidationRule } from \"../utilities/regularExpressions/ValidatePartNumber.Regex\";\r\nimport { ValidationRule } from \"./ValidationRule\";\r\n\r\ntype IValidateFormFieldProps<T extends string | number | readonly string[]> = {\r\n  value: T;\r\n  id: string;\r\n  setValue: (value) => void;\r\n  validations: IValidationRule<T>[];\r\n};\r\n\r\nexport function ValidatedFormField<\r\n  T extends string | number | readonly string[]\r\n>({ value, id, setValue, validations }: IValidateFormFieldProps<T>) {\r\n  return (\r\n    <>\r\n      <input\r\n        id={id}\r\n        value={value}\r\n        onChange={(e) => setValue(e.target.value)}\r\n        aria-describedby={id + \"errors\"}\r\n      />\r\n      <div id={id + \"errors\"} className=\"sr-only\">\r\n        {validations\r\n          .filter((x) => !x.validationFunction(value))\r\n          .map((x) => x.validationDescription)\r\n          .join(\". \")}\r\n      </div>\r\n      {validations.map(({ validationFunction, validationDescription }) => (\r\n        <ValidationRule\r\n          validationFunction={validationFunction}\r\n          value={value}\r\n          message={validationDescription}\r\n        />\r\n      ))}\r\n    </>\r\n  );\r\n}\r\n","import * as React from \"react\";\nimport \"./styles.css\";\n\nimport { PartNumberValidationRules } from \"./utilities/regularExpressions/ValidatePartNumber.Regex\";\nimport useDebounce from \"use-debounce/lib/useDebounce\";\nimport { PartsList } from \"./PartsList\";\n\nimport exclusionsList from \"./Exclusions.json\";\nimport { ValidatedFormField } from \"./components/ValidatedFormField\";\n\nexport default function App() {\n  const [partNumber, setPartNumber] = React.useState(\"\");\n\n  //only make api request with lowercase letters as partnumbers are case-insensitive\n  //and only make request after user has  paused inputing for 300ms\n  const [debouncedPartNumber] = useDebounce(partNumber.toLowerCase(), 300);\n\n  const partNumberIsValid = PartNumberValidationRules.every(\n    ({ validationFunction }) => validationFunction(debouncedPartNumber)\n  );\n\n  const isBlacklisted = (exclusionsList as any)\n    .map((e) => e.PartNumber)\n    .includes(debouncedPartNumber);\n\n  return (\n    <main className=\"App\">\n      <h1>PartsTrader</h1>\n      <h2>Search for a part </h2>\n      <form>\n        <label htmlFor=\"partNumber\">Part Number: </label>\n        <ValidatedFormField\n          id=\"partNumber\"\n          value={partNumber}\n          setValue={(partNumber) => setPartNumber(partNumber)}\n          validations={PartNumberValidationRules}\n        />\n      </form>\n      <div>\n        {debouncedPartNumber && partNumberIsValid && !isBlacklisted && (\n          <PartsList partNumber={debouncedPartNumber} />\n        )}\n      </div>\n    </main>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}