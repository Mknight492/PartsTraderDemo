{"version":3,"sources":["utilities/regularExpressions/ValidatePartNumber.Regex.ts","services/PartsTraderPartsService.ts","PartsList.tsx","components/Icons/Check.tsx","components/Icons/Cross.tsx","components/ValidationRule.tsx","components/ValidatedFormField.tsx","components/Icons/Gear.tsx","App.tsx","utilities/isBlackListed.ts","serviceWorker.ts","index.tsx"],"names":["PartNumberValidationRules","validationFunction","partNumber","RegExp","test","validationDescription","PartsTraderPartsServiceCache","PartsTraderPartsService","_partNumber","Promise","resolve","_reject","setTimeout","id","v4","cost","faker","commerce","price","PartsList","useState","list","setList","useEffect","then","res","map","el","style","margin","key","Check","width","height","viewBox","className","fill","xmlns","color","fillRule","d","Cross","ValidationRule","value","message","display","alignItems","ValidatedFormField","setValue","validations","onChange","e","target","aria-describedby","filter","x","join","Gear","App","React","setPartNumber","useDebounce","toLowerCase","debouncedPartNumber","partNumberIsValid","every","Header","PartSearchSection","htmlFor","exclusionsList","PartNumber","includes","isBlacklisted","styled","div","section","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.a4645f3e.chunk.js","sourcesContent":["//consider adding the\r\nexport type IValidationRule<T> = {\r\n  validationFunction: (x: T) => boolean;\r\n  validationDescription: string;\r\n};\r\n\r\nexport const PartNumberValidationRules: IValidationRule<string>[] = [\r\n  {\r\n    validationFunction: (partNumber) => RegExp(\"^([0-9]{4})\").test(partNumber),\r\n    validationDescription:\r\n      \"Part number, has a valid part id, by starting with four letters\", //partid\r\n  },\r\n  {\r\n    validationFunction: (partNumber) => /^[^-]+-[^-]+$/.test(partNumber),\r\n    validationDescription:\r\n      \"Part number and part code are separated by a single hypen ( '-' )\",\r\n  },\r\n  {\r\n    validationFunction: (partNumber) =>\r\n      RegExp(\"[a-zA-Z0-9]{4}$\").test(partNumber),\r\n    validationDescription:\r\n      \"Part number, has a valide part code, by ending with four or more digits or number\", //partcode\r\n  },\r\n  {\r\n    validationFunction: (partNumber) =>\r\n      RegExp(\"^[a-zA-Z0-9-]*$\").test(partNumber),\r\n    validationDescription:\r\n      \"Part number doesn't have any special characters or white space\",\r\n  },\r\n];\r\n\r\nexport const AllPartNumberRegexs = (partnumber: string) =>\r\n  PartNumberValidationRules.every(({ validationFunction }) =>\r\n    validationFunction(partnumber)\r\n  );\r\n","import { v4 } from \"uuid\";\r\nimport faker from \"faker\";\r\n\r\n//there was mention of an IPartsTraderPartsService in the email\r\n//However there was no interface to implement and I don't like using\r\n//Dependency Injection in javascript, so I've implement as an object\r\n//Also I would normally cache using something like redux but I felt this\r\n//the benefits outweights the cost for this very small demo\r\nexport const PartsTraderPartsServiceCache: { [key: string]: any } = {};\r\n\r\nexport const PartsTraderPartsService = {\r\n  getPartsByPartNumber: (_partNumber: string) =>\r\n    new Promise((resolve, _reject) => {\r\n      setTimeout(() => {\r\n        resolve([\r\n          { id: v4(), cost: faker.commerce.price() },\r\n          { id: v4(), cost: faker.commerce.price() },\r\n          { id: v4(), cost: faker.commerce.price() },\r\n        ]);\r\n      }, 1000);\r\n    }),\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  PartsTraderPartsServiceCache,\r\n  PartsTraderPartsService,\r\n} from \"./services/PartsTraderPartsService\";\r\n\r\nexport const PartsList = ({ partNumber }: { partNumber: string }) => {\r\n  var [list, setList] = useState(PartsTraderPartsServiceCache[partNumber]);\r\n\r\n  useEffect(() => {\r\n    setList(PartsTraderPartsServiceCache[partNumber]);\r\n  }, [partNumber]);\r\n\r\n  if (!list) {\r\n    PartsTraderPartsService.getPartsByPartNumber(partNumber).then((res) => {\r\n      PartsTraderPartsServiceCache[partNumber] = res;\r\n      setList(res);\r\n    });\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <h3>Available Parts:</h3>\r\n      <div>\r\n        {list ? (\r\n          list.map((el) => (\r\n            <div style={{ margin: 10 }} key={el.id}>\r\n              <div> Part Id: {el.id} </div>\r\n              <div>Part Price: {el.cost}</div>\r\n            </div>\r\n          ))\r\n        ) : (\r\n          <div> Loading </div>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nexport const Check = () => (\r\n  <svg\r\n    width=\"2em\"\r\n    height=\"2em\"\r\n    viewBox=\"0 0 16 16\"\r\n    className=\"bi bi-check2\"\r\n    fill=\"currentColor\"\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    style={{ color: \"green\" }}\r\n  >\r\n    <path\r\n      fillRule=\"evenodd\"\r\n      d=\"M13.854 3.646a.5.5 0 0 1 0 .708l-7 7a.5.5 0 0 1-.708 0l-3.5-3.5a.5.5 0 1 1 .708-.708L6.5 10.293l6.646-6.647a.5.5 0 0 1 .708 0z\"\r\n    />\r\n  </svg>\r\n);\r\n","import React from \"react\";\r\n\r\nexport const Cross = () => (\r\n  <svg\r\n    width=\"2em\"\r\n    height=\"2em\"\r\n    viewBox=\"0 0 16 16\"\r\n    className=\"bi bi-x\"\r\n    fill=\"currentColor\"\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    style={{ color: \"red\" }}\r\n  >\r\n    <path\r\n      fillRule=\"evenodd\"\r\n      d=\"M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z\"\r\n    />\r\n  </svg>\r\n);\r\n","import * as React from \"react\";\r\nimport { Check } from \"./Icons/Check\";\r\nimport { Cross } from \"./Icons/Cross\";\r\n\r\nexport const ValidationRule = ({ value, validationFunction, message }: any) => {\r\n  return (\r\n    <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n      {validationFunction(value) ? <Check /> : <Cross />}\r\n      <span> {message} </span>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { IValidationRule } from \"../utilities/regularExpressions/ValidatePartNumber.Regex\";\r\nimport { ValidationRule } from \"./ValidationRule\";\r\n\r\nexport type IValidateFormFieldProps<\r\n  T extends string | number | readonly string[]\r\n> = {\r\n  value: T;\r\n  id: string;\r\n  setValue: (value) => void;\r\n  validations: IValidationRule<T>[];\r\n};\r\n\r\nexport function ValidatedFormField<\r\n  T extends string | number | readonly string[]\r\n>({ value, id, setValue, validations }: IValidateFormFieldProps<T>) {\r\n  return (\r\n    <>\r\n      <input\r\n        id={id}\r\n        value={value}\r\n        onChange={(e) => setValue(e.target.value)}\r\n        aria-describedby={id + \"errors\"}\r\n      />\r\n      <div id={id + \"errors\"} className=\"sr-only\">\r\n        {validations\r\n          .filter((x) => !x.validationFunction(value))\r\n          .map((x) => x.validationDescription)\r\n          .join(\". \")}\r\n      </div>\r\n      {validations.map(({ validationFunction, validationDescription }) => (\r\n        <ValidationRule\r\n          key={validationDescription}\r\n          validationFunction={validationFunction}\r\n          value={value}\r\n          message={validationDescription}\r\n        />\r\n      ))}\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport const Gear = () => (\r\n  <svg\r\n    width=\"3em\"\r\n    height=\"3em\"\r\n    viewBox=\"0 0 16 16\"\r\n    className=\"bi bi-gear-wide-connected\"\r\n    fill=\"currentColor\"\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    style={{ display: \"inline\", color: \"white\" }}\r\n  >\r\n    <path\r\n      fillRule=\"evenodd\"\r\n      d=\"M8.932.727c-.243-.97-1.62-.97-1.864 0l-.071.286a.96.96 0 0 1-1.622.434l-.205-.211c-.695-.719-1.888-.03-1.613.931l.08.284a.96.96 0 0 1-1.186 1.187l-.284-.081c-.96-.275-1.65.918-.931 1.613l.211.205a.96.96 0 0 1-.434 1.622l-.286.071c-.97.243-.97 1.62 0 1.864l.286.071a.96.96 0 0 1 .434 1.622l-.211.205c-.719.695-.03 1.888.931 1.613l.284-.08a.96.96 0 0 1 1.187 1.187l-.081.283c-.275.96.918 1.65 1.613.931l.205-.211a.96.96 0 0 1 1.622.434l.071.286c.243.97 1.62.97 1.864 0l.071-.286a.96.96 0 0 1 1.622-.434l.205.211c.695.719 1.888.03 1.613-.931l-.08-.284a.96.96 0 0 1 1.187-1.187l.283.081c.96.275 1.65-.918.931-1.613l-.211-.205a.96.96 0 0 1 .434-1.622l.286-.071c.97-.243.97-1.62 0-1.864l-.286-.071a.96.96 0 0 1-.434-1.622l.211-.205c.719-.695.03-1.888-.931-1.613l-.284.08a.96.96 0 0 1-1.187-1.186l.081-.284c.275-.96-.918-1.65-1.613-.931l-.205.211a.96.96 0 0 1-1.622-.434L8.932.727zM8 12.997a4.998 4.998 0 1 0 0-9.995 4.998 4.998 0 0 0 0 9.996z\"\r\n    />\r\n    <path\r\n      fillRule=\"evenodd\"\r\n      d=\"M7.375 8L4.602 4.302l.8-.6L8.25 7.5h4.748v1H8.25L5.4 12.298l-.8-.6L7.376 8z\"\r\n    />\r\n  </svg>\r\n);\r\n","import * as React from \"react\";\nimport styled from \"styled-components\";\nimport \"./styles.css\";\n\nimport { PartNumberValidationRules } from \"./utilities/regularExpressions/ValidatePartNumber.Regex\";\nimport useDebounce from \"use-debounce/lib/useDebounce\";\nimport { PartsList } from \"./PartsList\";\nimport { ValidatedFormField } from \"./components/ValidatedFormField\";\nimport { isBlacklisted } from \"./utilities/isBlackListed\";\nimport { Gear } from \"./components/Icons/Gear\";\n\nexport default function App() {\n  const [partNumber, setPartNumber] = React.useState(\"\");\n\n  //only make api request with lowercase letters as partnumbers are case-insensitive\n  //and only make request after user has  paused inputing for 300ms\n  const [debouncedPartNumber] = useDebounce(partNumber.toLowerCase(), 300);\n\n  const partNumberIsValid = PartNumberValidationRules.every(\n    ({ validationFunction }) => validationFunction(debouncedPartNumber)\n  );\n\n  return (\n    <main className=\"App\">\n      <Header>\n        <Gear />\n        <h1>PartsTrader</h1>\n      </Header>\n      <PartSearchSection id=\"partsSearch\">\n        <h2>Search for a part </h2>\n        <form>\n          <label htmlFor=\"partNumber\">Part Number: </label>\n          <ValidatedFormField\n            id=\"partNumber\"\n            value={partNumber}\n            setValue={(partNumber) => setPartNumber(partNumber)}\n            validations={PartNumberValidationRules}\n          />\n        </form>\n        <div>\n          {debouncedPartNumber &&\n            partNumberIsValid &&\n            !isBlacklisted(debouncedPartNumber) && (\n              <PartsList partNumber={debouncedPartNumber} />\n            )}\n        </div>\n      </PartSearchSection>\n    </main>\n  );\n}\n\n// I wanted to use the pactual Parts trader color but it fails accessability critera as it has insufficient contrast with white\n// rgb(16, 146, 182) , also if It were a larger project I would use variables for all the main colors and sizes etc\nconst Header = styled.div`\n  background-color: rgb(16, 146, 182);\n  padding: 6px;\n  display: flex;\n  align-items: center;\n  h1 {\n    padding: 20px;\n    margin: 0px;\n    color: white;\n    display: inline;\n    font-size: 35px;\n  }\n`;\n\nconst PartSearchSection = styled.section`\n  padding: 30px;\n  h2 {\n    color: rgb(16, 146, 182);\n  }\n`;\n","import exclusionsList from \"../Exclusions.json\";\r\n\r\nexport const isBlacklisted = (partNumber) =>\r\n  (exclusionsList as any)\r\n    .map((e) => e.PartNumber.toLowerCase())\r\n    .includes(partNumber.toLowerCase());\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./normalize.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}